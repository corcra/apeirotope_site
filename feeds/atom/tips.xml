<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>apeirotope - tips</title><link href="/" rel="alternate"></link><link href="feeds/atom/tips.xml" rel="self"></link><id>/</id><updated>2020-11-29T00:00:00+00:00</updated><entry><title>podcast review 2020</title><link href="tips/2020-11-29-podcasts-2020.html" rel="alternate"></link><published>2020-11-29T00:00:00+00:00</published><updated>2020-11-29T00:00:00+00:00</updated><author><name>corcra</name></author><id>tag:None,2020-11-29:tips/2020-11-29-podcasts-2020.html</id><summary type="html">&lt;p&gt;One of the nice things about having your own website is that you can do whatever you want. Today I am going to recommend/describe some podcasts I listen to. I usually do this directly to whoever speaks to me after I find a new one, but now I can â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the nice things about having your own website is that you can do whatever you want. Today I am going to recommend/describe some podcasts I listen to. I usually do this directly to whoever speaks to me after I find a new one, but now I can do it to people on the internet too.&lt;/p&gt;
&lt;p&gt;This will be more of a review than strictly a list of &lt;em&gt;recommendations&lt;/em&gt;, so I'm not saying all of these are great. But I did listen to them.&lt;/p&gt;
&lt;p&gt;Warning: some of these podcasts will try to sell you a mattress.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://gimletmedia.com/shows/reply-all"&gt;Reply All&lt;/a&gt; is probably the most generic podcast recommendation I could give. It's slickly produced, it's reliably entertaining, it has interesting trivia and moments of heart and touches on contemporary issues in a way which is not especially challenging. You sort of know what you're getting, even if you don't know what it'll be about. I have a strange memory of listening to the first few episodes of this when it started back in 2014 and being like "what is this podcast supposed to be about". Then I stopped listening for 5 years and I still don't entirely know. It's just about... stuff, you know? Stuff on the internet. Episode rec: &lt;a href="https://gimletmedia.com/shows/reply-all/kwh23r/148-bedbugs-and-aliens"&gt;Bedbugs and Aliens&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://99percentinvisible.org/"&gt;99% Invisible&lt;/a&gt; is another reliable recommendation. The host (Roman Mars) has a strange and specific way of speaking which subtly aggravates me, but the content is really great. It's about "design", which is pretty broad - they talk about cities, infrastructure, architecture, objects, history, etc. The stories are interesting and hopefully mostly factual and the urbanism bias is very much up my alley. Episode rec: &lt;a href="https://99percentinvisible.org/episode/palaces-for-the-people/"&gt;Palaces for the People&lt;/a&gt; (spoiler: they are LIBRARIES)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://maximumfun.org/podcasts/adventure-zone/"&gt;The Adventure Zone&lt;/a&gt; is a RPG podcast, which is a genre of podcast where you listen to people play role-playing games (with some editing). TAZ features known podcasters "the McElroy family", who seem to be lovely people and also very funny. I listened to TAZ Amnesty, which was a &lt;a href="http://apocalypse-world.com/pbta/games/title/Monster_of_the_Week"&gt;Monster of the Week&lt;/a&gt; campaign. They managed to blend an interesting world, heartfelt story, and absurd humour. I understand there to be many RPG podcasts out there, but I have mostly only listened to this one. Episode rec: &lt;a href="https://maximumfun.org/episodes/adventure-zone/adventure-zone-amnesty-episode-1/"&gt;Episode 1 of Amnesty I guess&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.parcast.com/mythology"&gt;Mythology (on the Parcast Network!)&lt;/a&gt; is dramatisations of stories from mythology, in that they get voice actors to play out stories from mythology. I'm not mythology buff and suspect this is some entry-level mythology content. Please do not @ me with mythology-related screeds. It's light-weight story telling, although the reuse of voice actors gets a bit confusing if you listen for too long at once. The oddest thing about this podcast is how I get the feeling it's made by aliens who want to blend in, but who are too enthusiastic about mythology to pull it off. I will not elaborate on what I mean by this. Episode rec: The Abduction of Persephone.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://theconversation.com/uk/topics/the-anthill-podcast-27460"&gt;The Anthill&lt;/a&gt; is a podcast from &lt;a href="https://theconversation.com/"&gt;The Conversation&lt;/a&gt;. Their sthick is getting academics directly to write articles (or be interviewed on a podcast) on topics of their expertise. The format seems to be multi-episode mini-series with long gaps, so it's not a "reliable weekly" sort of thing. Direct academic involvement means the quality of information should be pretty high, and they better not have lied to me. I've only listened to three of the mini-series (&lt;a href="https://theconversation.com/india-tomorrow-part-1-fake-news-and-the-battle-for-information-113579"&gt;India Tomorrow&lt;/a&gt;, &lt;a href="https://theconversation.com/how-to-spot-a-conspiracy-theory-expert-guide-to-conspiracy-theories-part-one-133802"&gt;Conspiracy Theories&lt;/a&gt;, &lt;a href="https://theconversation.com/how-europe-recovered-from-the-black-death-recovery-podcast-series-part-one-139896"&gt;Recovery&lt;/a&gt;) and they were all great.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This concludes the list of &lt;em&gt;reasonably generic&lt;/em&gt; podcasts I listen to. Now comes the more esoteric stuff, I guess.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://lingthusiasm.com/"&gt;Lingthusiasm&lt;/a&gt; is about linguistics. It's a podcast hosted by two linguists, talking about linguistics. The enthusiasm they have for linguistics is really charming. I don't listen to this one all the time because whenever I learn things about linguistics I forget things about computers, but it's another podcast where I will reliably come away having learned something. About linguistics. Episode rec: &lt;a href="https://soundcloud.com/lingthusiasm/39-how-to-rebalance-a-lopsided-conversation"&gt;How to Rebalance a Lopsided Conversation&lt;/a&gt; or &lt;a href="https://soundcloud.com/lingthusiasm/12-sounds-you-cant-hear-babies-accents-and-phonemes"&gt;Sounds You Can't Hear&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.criticalfrequency.org/drilled"&gt;Drilled&lt;/a&gt; is a "True Crime Podcast about Climate Change". It focuses on fossil fuel propaganda and it's absolutely enraging. I actually stopped listening to it because I don't like making myself so simultaneously miserable and angry, but I did find it genuinely very informative. The second season (about crab fisherman) was a very different sort of climate story to what I'm used to. Overall, it's got that true crime investigative energy and it will make you want to burn Exxon to the ground.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/maintenancepod"&gt;Maintenance Phase&lt;/a&gt; is about debunking wellness culture, health and weight-loss fads. It &lt;em&gt;just&lt;/em&gt; started so I don't have a lot to go by, but the first few episodes have been strong. I find the discussion of dieting and diet culture very enlightening, because I'm a lucky person who eats whatever I want without thinking about it really. The hosts have something of a similar conversational style as Lingthusiasm, which is &lt;em&gt;very enthusiastic&lt;/em&gt; in a way I feel is quite American, but neither of the hosts of Lingthusiasm are American, so that's on me and I need to think about that. Episode rec: &lt;a href="https://open.spotify.com/episode/2PnFGxYEIgss1KISeICFHp?si=XIdHUSpPQ7Gk5_siyjXxLQ"&gt;Moon Juice&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://thehistoryofrome.typepad.com/revolutions_podcast/"&gt;Revolutions&lt;/a&gt; is my newest podcast addition and therefore the direct inspiration for this post. This is a history podcast about "great political revolutions" and has been a hard sell to my friends. I am shamefully ignorant of history and find myself going on occasional history splurges trying to catch up (I was really obsessed with World War 1 for a while after reading The Guns of August). It turns out that history is really interesting when it's told to you like a story, and not as a list of events to memorise. I've started right at the start of this podcast (in 2013) so am still learning about the English Civil War of 1642. I have good reason to believe there will be more revolutions to come.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.imaginaryworldspodcast.org/"&gt;Imaginary Worlds&lt;/a&gt; is about sci-fi and fantasy, with a focus (ostensibly) on world-building. I think it's broader than that though, and the episodes often touch on wider issues relating to the media, or more fundamental ideas which are explored in sci-fi/fantasty. I only listen when I've read/seen the thing, so I don't listen to this one all that often. I do love imaginary worlds, though. Episode recs: &lt;a href="https://www.imaginaryworldspodcast.org/episodes/the-power-of-the-makeover-mage"&gt;The Power of the Makeover Mage&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This concludes the list of &lt;em&gt;reasonably generic esoteric&lt;/em&gt; podcasts I listen to. Now for the flagrantly political ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://podcasts.apple.com/us/podcast/mass-for-shut-ins-the-gin-and-tacos-podcast/id1341525125?mt=2"&gt;Mass for Shut-ins&lt;/a&gt; is the podcast version of &lt;a href="http://www.ginandtacos.com/"&gt;Gin and Tacos&lt;/a&gt;, a somewhat snarky political scientist who writes about American politics. I mostly view the podcast as the extension to his blog, which I've been reading on and off for many years now. I find what he has to say about the machinations of American politics interesting, e.g. &lt;a href="https://podcasts.apple.com/us/podcast/minicast-c6-fdrs-court-packing-scheme-1937/id1341525125?i=1000492197345"&gt;FDR's Court Packing Scheme&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://citationsneeded.libsyn.com/"&gt;Citations Needed&lt;/a&gt; is about "the intersection of media, PR, and power". This is a very well-produced podcast that will consistently point out how something you thought was benign is actually bad. It's interesting in a depressing way as a result, although it can be validating to have your suspicions (that something you thought was benign is actually bad) confirmed by someone else. Examples include &lt;a href="https://citationsneeded.libsyn.com/episode-116-the-pro-gentrification-aspirationalism-of-hgtvs-house-flipping-shows"&gt;The Pro-Gentrification Aspirationalism of HGTV's House-Flipping Shows&lt;/a&gt; and &lt;a href="https://citationsneeded.libsyn.com/episode-85-incitement-against-the-homeless-part-i-the-infestation-rhetoric-of-local-news"&gt;Incitement Against the Homeless (Part I) - The Infestation Rhetoric of Local News&lt;/a&gt;. My enthusiasm for this podcast started to wane after I felt like it was making me hopelessly cynical, so I only listen intermittently now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.currentaffairs.org/podcast"&gt;Current Affairs&lt;/a&gt; is the podcast to accompany the magazine, of which I am also a subscriber. Current Affairs (both magazine and podcast) sit nicely in the intersection of serious leftist critique and frivolity. The typical podcast features some subset of the editors of CA talking about current events and more. My favourite segment is "Lefty Shark Tank", where someone proposes an absurd-sounding policy which will be judged by the others. Policies have included "Lower the voting age to zero", "Elected officials should have to wear burlap sacks", and other less memorable things that sound ridiculous but have surprising implications. It's difficult to select an episode to recommend as the panel episodes are basically miscellany and news, so take this Episode rec: &lt;a href="https://currentaffairs.simplecast.com/episodes/48-an-analysis-of-birds-large-and-small"&gt;An Analysis of Birds, Large and Small&lt;/a&gt;, or this horrifying/slightly inspiring one where two of the lawyers on the CA team talk about their work: &lt;a href="https://currentaffairs.simplecast.com/episodes/immigration-update-detention-and-covid"&gt;Immigration Update: Detention and COVID&lt;/a&gt;. Not sure why CA has so many lawyers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://workingclasshistory.com/podcast/"&gt;Working Class History&lt;/a&gt; is a history podcast, focusing on the role of normal (=working class) people in history. I got into it via a crossover they did with &lt;a href="https://workingclasshistory.com/2020/05/26/e38-mutiny-with-srsly-wrong/"&gt;Srsly Wrong on mutinies&lt;/a&gt;. I find this podcast can be a bit dry or slightly more taxing to listen to than some of the other more podcasts, so need to be in an attentive mood, but the subject matter is generally fascinating. Slightly esoteric subject matter means even people who know more history than me will probably learn something, but you must understand I'm really starting with nothing here, August 1914 notwithstanding. Episode rec: &lt;a href="https://workingclasshistory.com/2019/04/09/wch-crime-columbia-eagle-mutiny/"&gt;miniseries on the Columbia Eagle Mutiny&lt;/a&gt;, or &lt;a href="https://workingclasshistory.com/2020/02/17/e35-37-the-43-group/"&gt;miniseries on The 43 Group&lt;/a&gt; if you're less interested in mutinies than I am.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://generalintellectunit.net/"&gt;General Intellect Unit&lt;/a&gt; looks at the intersection of technology and left politics. I only got onto this one recently but suspect I will have many thoughts on it in future (given I am a Tech). They're quite interested in cybernetics and a bunch of the episodes are essentially summaries of the main ideas of Stafford Beer, e.g. &lt;a href="http://generalintellectunit.net/e/031-designing-freedom/"&gt;Designing Freedom&lt;/a&gt;, but they also cover the contents of related books, like &lt;a href="http://generalintellectunit.net/e/008-red-plenty-part-1/"&gt;Red Plenty&lt;/a&gt;, or sci-fi I already like, like &lt;a href="http://generalintellectunit.net/e/017-the-dispossessed-with-fraser-simons/"&gt;The Dispossesed&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://soundcloud.com/therednationpod"&gt;The Red Nation Podcast&lt;/a&gt; is about "Indigenous history, politics and culture from a left perspective". As an Irish person living in England, this podcast is like a dispatch from a totally different world, but it's a welcome change from the typical US-based perspectives. There's a bit of an academic energy to it at times, but mostly I find it interesting to hear what Indigenous people are saying about current and historical events. Episode rec: &lt;a href="https://soundcloud.com/therednationpod/the-fourth-of-you-lie-w-dallas"&gt;The Fourth of You-Lie&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://blubrry.com/wdtatw/"&gt;We Don't Talk About the Weather&lt;/a&gt; is a podcast I found while trying to get away from American podcasts (sorry, rest of list). WDTATW is two London-based guys talking about current affairs, mostly in the UK. The podcast aptly self-describes itself as "sounding like screaming and crying", which captures some of the spirit if not the actual energy levels of the podcast. I mostly use this as a palette cleanser from all the US-based takes beaming into my brain 23 hours a day, especially if something has happened in the UK that needs analysing. Unfortunately something has always just happened in the UK that needs analysing, and it's usually terrible. I feel obligated to be at least somewhat informed about the politics of the country I live in, so here we are. "Boris Johnson is a pagan" comes up more often than I think is normal. Episode rec is a bit hard but take &lt;a href="https://blubrry.com/wdtatw/59775210/episode-119-i-cant-believe-i-forgot-5g/"&gt;I Can't Believe I "Forgot" 5G&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://trashfuturepodcast.podbean.com/"&gt;Trashfuture&lt;/a&gt; is one I don't really listen to any more but want to include as part of the "Leftist Podcasts from the UK" genre, in case someone else likes it. It's a bunch of people discussing and making jokes about current events and politics. I stopped listening to it because it's too snarky and chaotic for me (people interrupting each other, etc), but if you like Spicy Takes and Internet Leftist Memes or whatever, you might like this. I will admit to enjoying the parts where they make fun of weird startups, though. Episode rec: &lt;a href="https://trashfuturepodcast.podbean.com/e/mit-media-lab-after-dark-part-3-we-just-make-boxes-here-feat-sarah-taber/"&gt;MIT Media Lab After Dark Part 3: We Just Make Boxes here feat. Sarah Taber&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://srslywrong.com/"&gt;Srsly Wrong&lt;/a&gt; is a "utopian leftist comedy podcast", and it's my favourite podcast. The first time I listened to it I couldn't figure out what was going on because the format is "mostly serious discussion of ideas interspersed with bizarre sketch comedy". What I really like about this podcast is more the underlying ideology espoused by the hosts rather than the format of the podcast itself (contrast this to Reply All, where the content is somewhat irrelevant but the experience of listening to the podcast is generally pleasant), although I also greatly enjoy the bizarre sketch comedy. I will write more about different ideas from this show, or some steps removed from this show, in due time. Discovering this podcast probably made my 2020. Episode recs: &lt;a href="https://srslywrong.com/podcast/189-library-socialism-usufruct/"&gt;Library Socialism and Usufruct&lt;/a&gt;, &lt;a href="https://srslywrong.com/podcast/217-trash/"&gt;Trash!&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This has been a non-exhaustive list of podcasts I have listened to in 2020. If you have suggestions for other podcasts you think I might enjoy, please let me know using normal communication channels.&lt;/p&gt;
&lt;p&gt;According to my podcast app (&lt;a href="https://www.pocketcasts.com/"&gt;Pocket Casts&lt;/a&gt;), I have spent 19 days and 21 hours listening to podcasts since November 2018, which is about 477 hours. Is that a large number? Compared to the amount of time I have spent playing Dota 2, the answer is no.&lt;/p&gt;</content><category term="tips"></category><category term="podcasts"></category><category term="recommendations"></category><category term="politics"></category><category term="history"></category><category term="design"></category><category term="linguistics"></category><category term="science fiction"></category></entry><entry><title>setting up mastodon with hometown</title><link href="tips/2020-05-07-leafytown.html" rel="alternate"></link><published>2020-05-07T00:00:00+01:00</published><updated>2020-05-07T00:00:00+01:00</updated><author><name>corcra</name></author><id>tag:None,2020-05-07:tips/2020-05-07-leafytown.html</id><summary type="html">&lt;p&gt;This is a 'how to do something' sort of blog post, I might write about why later. The something is running a social network for my friends.&lt;/p&gt;
&lt;p&gt;The starting point is probably &lt;a href="https://runyourown.social/"&gt;run your own social&lt;/a&gt;, which covers a lot of the 'why' and some of the 'what'. Chances are â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a 'how to do something' sort of blog post, I might write about why later. The something is running a social network for my friends.&lt;/p&gt;
&lt;p&gt;The starting point is probably &lt;a href="https://runyourown.social/"&gt;run your own social&lt;/a&gt;, which covers a lot of the 'why' and some of the 'what'. Chances are if you are reading this post you already know about it, but if not it's a good read and probably a prerequisite for caring about the rest of this post.&lt;/p&gt;
&lt;p&gt;In case it wasn't apparent from this website, I like running my own things. I decided that lockdown (&lt;em&gt;metadata: it has been approximately 55 days since I had a face-to-face conversation with someone I know&lt;/em&gt;) would be a good opportunity to find new ways of interacting with my friends. Maybe that's getting too far into the why, though. I grabbed another VPS (total VPS count: 3) and decided to set up a &lt;a href="https://docs.joinmastodon.org/"&gt;mastodon&lt;/a&gt; server running the &lt;a href="https://github.com/hometown-fork/hometown"&gt;hometown&lt;/a&gt; fork.&lt;/p&gt;
&lt;p&gt;The basic gist of running mastodon with hometown is to follow two sets of instructions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.joinmastodon.org/admin/prerequisites/"&gt;the mastodon server installation guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/hometown-fork/hometown/wiki/Initial-migration"&gt;the migrating from mastodon to hometown doc&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is basically comprehensive but I still messed it up the first time, so in this post I will walk through the steps with some inane recipe-tier flavour-text on the side.
Also, the hometown migration doc warns that it's not for beginners, so maybe I can help pseudo-beginners? Semi-nerds like myself still deserve autonomous social networks.&lt;/p&gt;
&lt;h3&gt;Step 1: Procure a server&lt;/h3&gt;
&lt;p&gt;My existing VPSes are with &lt;a href="https://www.heficed.com/"&gt;Heficed&lt;/a&gt;, which I knew as Host1Plus. I originally got a VPS with them many years ago because I wanted to run a Tor exit out of an African country, and they had a data centre in Johannesburg and didn't seem to care about the Tor exit thing.&lt;/p&gt;
&lt;p&gt;For reasons I price I opted for &lt;a href="https://www.ovh.co.uk/"&gt;OVH&lt;/a&gt; this time. In case it's useful, my VPS has 8GB of RAM and 160 GB of storage, and is running Ubuntu 18.04 (this is the recommended OS from the Mastodon guide). I put it in a London data centre, maybe one day I can visit it.&lt;/p&gt;
&lt;p&gt;Full disclosure: I initally only paid for one month of the VPS, then ignored 2 weeks worth of warning emails, and everything from I T E R A T I O N 1 got wiped. There was nothing I could do, in such an unprecedented time. In the current iteration I've paid for a year up front. This isn't immensely cheap (it cost about 200 pounds), but I'm one of the lucky ones right now because I have a job. Maybe if it takes off I'll ask for donations from the users.&lt;/p&gt;
&lt;h3&gt;Step 2: Install Mastodon version 2.9.3&lt;/h3&gt;
&lt;p&gt;This is where we approximately follow the &lt;a href="https://docs.joinmastodon.org/admin/prerequisites/"&gt;mastodon installation instructions&lt;/a&gt;, but make sure to end up with version 2.9.3 installed. This is (at time of writing) necessary for the subsequent hometown migration*. &lt;em&gt;update from 30 minutes after I wrote that: the hometown wiki looks a bit out of date, there are versions of hometown that are aligned with recent versions of Mastodon e.g. &lt;a href="https://github.com/hometown-fork/hometown/releases/tag/v1.0.3%2B3.1.2"&gt;v3.1.2&lt;/a&gt;, but I don't want to rewrite this entire blog post so ???&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This was the hardest part because you have to deviate slightly from the provided instructions. I'm assuming you're looking at them (time of writing: 7th May 2020) and basically following along, so I don't have to reproduce all the steps here. By the time that page is out of date, this one will be too.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.joinmastodon.org/admin/prerequisites/"&gt;Preparing the machine&lt;/a&gt; is all fine.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.joinmastodon.org/admin/install/"&gt;Installing from source&lt;/a&gt; is fine &lt;em&gt;until&lt;/em&gt; it comes to installing Ruby.
They recommend this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; RUBY_CONFIGURE_OPTS=--with-jemalloc rbenv install 2.6.6
&amp;gt; rbenv global 2.6.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This version of Ruby is too new! I went for version 2.6.1. I don't remember how I figured out this version would work, a dream maybe?&lt;/p&gt;
&lt;p&gt;Postgres installation instructions are all fine. Be careful if you already have the remnants of failed installations lying around (who would have that?!) with misleading table names. In a way, losing everything to the big VPS wipe was a gift.&lt;/p&gt;
&lt;p&gt;Vigilance is once again required while checking out the Mastodon codebase. They tell you to do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/tootsuite/mastodon.git live &amp;amp;&amp;amp; cd live
git checkout $(git tag -l | grep -v &amp;#39;rc[0-9]*$&amp;#39; | sort -V | tail -n 1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That second line is trying to check out the most recent version of Mastodon, and we're not here for that. I cheated by taking the commit hash for v2.9.3 from the Hometown instructions, which is gonna give us this instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/tootsuite/mastodon.git live &amp;amp;&amp;amp; cd live
git checkout 06f906acace5770fc10f333a203b036c5b72c849
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can sanity-check this has produced the correct version with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git describe --tags
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where it will dutifully give you &lt;code&gt;v2.9.3&lt;/code&gt;, probably.&lt;/p&gt;
&lt;p&gt;The rest of the Mastodon instructions are basically as-is. &lt;/p&gt;
&lt;p&gt;Before you do the interactive setup wizard&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;RAILS_ENV=production bundle exec rake mastodon:setup
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you should probably do step 1.5, though.&lt;/p&gt;
&lt;h3&gt;Step 1.5: Get a domain and mail server&lt;/h3&gt;
&lt;p&gt;The Mastodon server running on the VPS needs some way of being known to the outside world, and domain names are a recent technology purporting to improve on the otherwise-flawless system of memorising ipv4 addresses.&lt;/p&gt;
&lt;p&gt;I use &lt;a href="https://www.namecheap.com/"&gt;Namecheap&lt;/a&gt; for my domains (including apeiroto.pe and my Mastodon server). The basic idea is you rent a domain from them, because they're internet landlords I guess. Once you own your domain you can update its A Record (for me this is in the domain management page) to include the IP address of your VPS.&lt;/p&gt;
&lt;p&gt;I'm including 'get a mail server' in here because I did that with Namecheap as well. I briefly considered running my own mail server on the VPS, but I'm not at that level of running my own things. Not yet.
During the mastodon setup wizard it will ask for various details of your mail server, which should be available from whatever provider you go with (e.g SMTP address, username and password and such). I'm like 30% sure the way I set this up has left it open to harvesting by spambots, so I'm not going to give any further advice in case the spambots find me.&lt;/p&gt;
&lt;p&gt;The reason you are giving it an email address is so it can send things like Forgot Password? emails to your users.&lt;/p&gt;
&lt;h3&gt;Step 2.05: Finish step 2 and then check&lt;/h3&gt;
&lt;p&gt;Before proceeding, go to your new domain in the browser and check that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mastodon is working&lt;/li&gt;
&lt;li&gt;mastodon is version 2.9.3 (near the bottom of the page)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could stop here and be content with your Mastodon server running a slightly out of date version of Mastodon. You could be happy.&lt;/p&gt;
&lt;h3&gt;Step 3: Migrate to hometown&lt;/h3&gt;
&lt;p&gt;Now we refer back to &lt;a href="https://github.com/hometown-fork/hometown/wiki/Initial-migration"&gt;the hometown wiki page on migrating from mastodon&lt;/a&gt; mentioned before.&lt;/p&gt;
&lt;p&gt;Because we ensured to install version 2.9.3 before, this should mostly Just Work.
The only slightly odd thing for me was getting this error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git fetch --tags
&amp;gt; git merge v1.0.1+2.9.3
merge: v1.0.1+2.9.3 - not something we can merge
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This might be some git config issue but changing to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git fetch --tags -all
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and then merging as described fixed it.&lt;/p&gt;
&lt;p&gt;Following the rest of instructions as they are should result in your Mastodon server now including a mention of hometown at the bottom, indicating that it works. &lt;/p&gt;
&lt;h3&gt;Step 4 (optional): Make local-only posting default&lt;/h3&gt;
&lt;p&gt;For me, the reason to use hometown was that sweet local-only posting, but it's still possible for users to post publicly. Following all the above steps, it ended up that public (or &lt;em&gt;federated&lt;/em&gt; to be more specific) posting was the default. Having to toggle local-only on every tweet (I refuse to say toot because it sounds stupid as hell) was a pain and could easily result in accidental public posts. Thus began a saga of trying to figure out how to change this behaviour.&lt;/p&gt;
&lt;p&gt;I don't know much Javascript and I know even less Ruby, so after some fruitless attempts to reverse-engineer the codebase I got some friends involved, who are faster at reverse-engineering and who did not repeatedly pause their progress with games of starcraft 2. Eventually (like, four hours later) Paddy realised that this is just an option you can set in a config file:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hometown-fork/hometown/blob/hometown-dev/config/settings.yml#L20"&gt;here is the line&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In case of link rot, this is the &lt;code&gt;settings.yml&lt;/code&gt; file in the &lt;code&gt;config&lt;/code&gt; subfolder of the repository. The config option is &lt;code&gt;default_federation&lt;/code&gt;, and you want it to be &lt;code&gt;false&lt;/code&gt; for local-only to be default. I'm looking forward to discovering what the other options do.&lt;/p&gt;
&lt;h3&gt;Step 5: Give back to community&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;... by using acquired wisdom to update their documentation (maybe)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;While double-checking things for this post I realised that the hometown installation document seems to be out of date.&lt;/p&gt;
&lt;p&gt;Remember how we painstakingly made sure we had v2.9.3 of Mastodon installed, so we could use hometown? It looks like there's already &lt;a href="https://github.com/hometown-fork/hometown/releases/tag/v1.0.3%2B3.1.2"&gt;hometown v1.0.3 for mastodon v3.1.2&lt;/a&gt; so that was actually unnecessary and we could have just installed whatever Mastodon version we wanted. Anyway I hope you enjoyed this blog post, I'm going to go mass queens &lt;a href="https://starcraft2.com/en-gb/news/23405326"&gt;before they get nerfed&lt;/a&gt;.&lt;/p&gt;</content><category term="tips"></category><category term="sysadmin"></category><category term="mastodon"></category><category term="social media"></category><category term="vps"></category></entry><entry><title>installing tmux locally</title><link href="tips/2016-03-13-installing-tmux-locally.html" rel="alternate"></link><published>2016-03-13T00:00:00+00:00</published><updated>2016-03-13T00:00:00+00:00</updated><author><name>corcra</name></author><id>tag:None,2016-03-13:tips/2016-03-13-installing-tmux-locally.html</id><summary type="html">&lt;p&gt;I have been setting myself up on a new computing cluster (CentOS 6.7), so I'm in the lovely land of installing things without root. &lt;code&gt;tmux&lt;/code&gt; proved a bit frustrating, so here's what I ended up doing:&lt;/p&gt;
&lt;h2&gt;install libevent&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; needs this, I didn't have it (you &lt;em&gt;might&lt;/em&gt;, so try â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have been setting myself up on a new computing cluster (CentOS 6.7), so I'm in the lovely land of installing things without root. &lt;code&gt;tmux&lt;/code&gt; proved a bit frustrating, so here's what I ended up doing:&lt;/p&gt;
&lt;h2&gt;install libevent&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tmux&lt;/code&gt; needs this, I didn't have it (you &lt;em&gt;might&lt;/em&gt;, so try installing &lt;code&gt;tmux&lt;/code&gt; first). Grabbed it from the repository, then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/libevent/libevent
$ cd libevent
$ ./configure --prefix=$HOME
$ make
$ make verify       # this failed for me, oh well
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Choose your &lt;code&gt;prefix&lt;/code&gt; as you desire.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;libevent&lt;/code&gt; should be installed in &lt;code&gt;$HOME&lt;/code&gt;. Easy y0.&lt;/p&gt;
&lt;h2&gt;install tmux&lt;/h2&gt;
&lt;p&gt;Git all the things.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/tmux/tmux
$ cd tmux
$ zsh autogen.sh
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now for the thing which was &lt;em&gt;required to make everything work&lt;/em&gt;, a slightly augmented version of the &lt;a href="http://unix.stackexchange.com/a/17918"&gt;winning answer&lt;/a&gt; from &lt;a href="https://unix.stackexchange.com/questions/17907/why-cant-gcc-find-libevent-when-building-tmux-from-source"&gt;this Stack Exchange post&lt;/a&gt;...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/lib         # possibly optional, see below
$ DIR=$HOME
$ ./configure CFLAGS=&amp;quot;-I$DIR/include&amp;quot; LDFLAGS=&amp;quot;-L$DIR/lib&amp;quot; --prefix=$DIR
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Obviously I could have used &lt;code&gt;$HOME&lt;/code&gt; there instead of &lt;code&gt;$DIR&lt;/code&gt;, but I am staying consistent.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ make
$ make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And everything should Just Work now. This probably shouldn't have posed the difficulty that it did, but I'm a scientist, not a sysadmin.&lt;/p&gt;
&lt;h2&gt;final thing&lt;/h2&gt;
&lt;p&gt;Does the &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; line seem redundant to you? It seems redundant to me, but I had to add it to my &lt;code&gt;.zshenv&lt;/code&gt; (or, try &lt;code&gt;.bashrc&lt;/code&gt;) after this to get &lt;code&gt;tmux&lt;/code&gt; to continue working. May or may not have been necessary during installation (what with all that redundancy) but I'm not going to uninstall just to check, because tmux is &lt;em&gt;actually working&lt;/em&gt; and if I look at it too closely it will &lt;em&gt;definitely break&lt;/em&gt;.&lt;/p&gt;</content><category term="tips"></category><category term="unix"></category><category term="tmux"></category></entry><entry><title>linking between zotero and evernote (in OSX)</title><link href="tips/2015-12-18-zotero-and-evernote.html" rel="alternate"></link><published>2015-12-18T00:00:00+00:00</published><updated>2015-12-18T00:00:00+00:00</updated><author><name>corcra</name></author><id>tag:None,2015-12-18:tips/2015-12-18-zotero-and-evernote.html</id><summary type="html">&lt;p&gt;I'm upgrading my paper-management workflow from 'labyrinth of folders' to an
&lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; + &lt;a href="https://www.zotero.org/"&gt;Zotero&lt;/a&gt; mix. I
already use Evernote a little for this by writing paper summaries in
it, but I would rather do the 'heavy duty' management and organisation in
Zotero. So, I'd like to easily switch between the Evernote â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I'm upgrading my paper-management workflow from 'labyrinth of folders' to an
&lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; + &lt;a href="https://www.zotero.org/"&gt;Zotero&lt;/a&gt; mix. I
already use Evernote a little for this by writing paper summaries in
it, but I would rather do the 'heavy duty' management and organisation in
Zotero. So, I'd like to easily switch between the Evernote note about a paper and
the Zotero reference on it. I need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zotero â†’ Evernote  &lt;/li&gt;
&lt;li&gt;Evernote â†’ Zotero&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: This is all with OSX 10.11.1 (El Capitan), Evernote 6.3, and Zotero 4.0.28.10. YMMV.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Zotero to Evernote&lt;/h2&gt;
&lt;p&gt;My solution here is to add an attachment to the reference which is a link to 
the Evernote URI. Zotero gracefully handles this, you just right-click on the
reference and Add Attachment â†’ Attach Link to URI...&lt;/p&gt;
&lt;p&gt;The hard part is then &lt;em&gt;getting&lt;/em&gt; the URI. In (my currently-up-to-date version of)
Evernote, the Copy Note Link gives you a HTTP(S) link:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;https://www.evernote.com/shard/asdfgh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;This converts to the Evernote URI link if you paste it &lt;strong&gt;inside&lt;/strong&gt; Evernote,
which is pretty cool I guess but also not useful here.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I use the Evernote client and I don't want this, I want the URI like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;evernote:///view/adfgh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is (for now, probably) known as &lt;strong&gt;Classic&lt;/strong&gt; Note Link in Evernote, and you
get it by holding down &lt;code&gt;Alt&lt;/code&gt; on the menu after right-clicking on the note.
Bizarre and annoying, but whatever. It works.&lt;/p&gt;
&lt;p&gt;Now I can just double-click on the Evernote URI attachment on my reference in
Zotero and it'll open the note (in my Evernote client) with my notes on it.&lt;/p&gt;
&lt;h2&gt;Evernote to Zotero&lt;/h2&gt;
&lt;p&gt;Now, we want to get the Zotero URI (to the reference) and include it in an
Evernote note. The 'normal' URI you'd get from Zotero (using Item URI as your
Default Output Format under Preferences â†’ Export â†’ Quick Copy) is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;http://zotero.org/users/local/asdfgh/items/asdfgh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What I really want is the non-HTTP URI, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;zotero://select/items/asdfgh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, if you paste that into Evernote it doesn't recognise it as a URI
or anything that should be linkish. It just sits there, flat and idle and useless. &lt;em&gt;This is pretty annoying given it can
do this for Evernote URIs, as above, but whatever...&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Solution Sketch&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;This solution is from &lt;code&gt;brain.flush()&lt;/code&gt;; &lt;a href="http://blog.cdhq.de/archive/1366"&gt;
Connecting Zotero and Evernote&lt;/a&gt; and &lt;a href="http://blog.cdhq.de/archive/1396"&gt;RTF-Links from Zotero in Evernote&lt;/a&gt;. This post isn't just a link to that blog because I fear link rot.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The workaround is pretty gross but bear with me. First, you modify Zotero
so that its Quick Copy gives you a HTML-formatted URI, e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zotero://select/items/asdfgh&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Paper Title&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;br&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;then convert the HTML in your clipboard to RTF, which can be pasted into Evernote and will act 'as desired'. The intermediate RTF representation looks something like this, btw, so clearly there's scope for further customisation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf130  
{\fonttbl\f0\froman\fcharset0 Times-Roman;}  
{\colortbl;\red255\green255\blue255;\red0\green0\blue233;\red0\green0\blue0;}  
\deftab720  
\pard\pardeftab720\sl280\partightenfactor0  
{\field{\*\fldinst{HYPERLINK &amp;quot;zotero://select/items/asdfgh&amp;quot;}}{\fldrslt  
\f0\fs24 \cf2 \expnd0\expndtw0\kerning0  
\ul \ulc2 \outl0\strokewidth0 \strokec2 Paper Title}}  
\f0\fs24 \cf3 \expnd0\expndtw0\kerning0  
\outl0\strokewidth0 \strokec3 \  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ew. But you never need to look at this.&lt;/p&gt;
&lt;h3&gt;Specific Steps&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Modifying Quick Copy:&lt;/li&gt;
&lt;li&gt;Put &lt;a href="https://gist.github.com/ColdDevil/9145021"&gt;this script&lt;/a&gt; in your &lt;code&gt;translators&lt;/code&gt; folder wherever your Zotero is.&lt;/li&gt;
&lt;li&gt;Tell Zotero to use it for Quick Copy: Preferences â†’ Export â†’ Default Output Format: select &lt;code&gt;ZotSelect Link (HTML)&lt;/code&gt; from the dropdown.&lt;/li&gt;
&lt;li&gt;Now &lt;code&gt;Cmd + Shift + C&lt;/code&gt; will put the HTML-formatted link in your clipboard.&lt;/li&gt;
&lt;li&gt;Converting HTML to RTF:&lt;/li&gt;
&lt;li&gt;The script to do the transformation is (choose your favourite &lt;code&gt;UTF-8&lt;/code&gt; region...)
  &lt;code&gt;export LANG=en_US.UTF-8; pbpaste | textutil -stdin -stdout -format html -convert rtf -inputencoding utf-8 | pbcopy&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can automate this with &lt;a href="https://en.wikipedia.org/wiki/Automator_%28software%29"&gt;Automator&lt;/a&gt;, (OSX tool):&lt;ul&gt;
&lt;li&gt;Create a Service, add an action of &lt;code&gt;Run Shell Script&lt;/code&gt;, paste in above code.&lt;/li&gt;
&lt;li&gt;Make sure set the "Service receives selected..." dropdown to "no input".&lt;/li&gt;
&lt;li&gt;Call the service whatever you want - following the source blog I called mine "Convert HTML clipboard to RTF".&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Set a keyboard shortcut for the new service under Keyboard â†’ Shortcuts â†’ Services. Also following the blog, I used &lt;code&gt;Cmd + Shift + Ctrl + C&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So now the workflow is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[in Zotero] &lt;code&gt;Cmd + Shift + C&lt;/code&gt; on desired reference  &lt;/li&gt;
&lt;li&gt;[wherever] &lt;code&gt;Cmd + Shift + Ctrl + C&lt;/code&gt; to transform contents of clipboard     &lt;/li&gt;
&lt;li&gt;[in Evernote] paste normally to get a link which opens the reference in Zotero.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tips"></category><category term="zotero"></category><category term="evernote"></category><category term="osx"></category><category term="citations"></category></entry><entry><title>quotes in awk</title><link href="tips/2015-05-27-quotes-in-awk.html" rel="alternate"></link><published>2015-05-27T00:00:00+01:00</published><updated>2015-05-27T00:00:00+01:00</updated><author><name>corcra</name></author><id>tag:None,2015-05-27:tips/2015-05-27-quotes-in-awk.html</id><summary type="html">&lt;p&gt;Lazily trying to paste a long list of strings into python, which means I need things wrapped in quotes (and commas, but I'm excluding them from this example cause they're easy). Grabbing the strings from a file using &lt;code&gt;awk&lt;/code&gt;, but since quotes (apostrophes) are special in &lt;code&gt;awk&lt;/code&gt; this messes things â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lazily trying to paste a long list of strings into python, which means I need things wrapped in quotes (and commas, but I'm excluding them from this example cause they're easy). Grabbing the strings from a file using &lt;code&gt;awk&lt;/code&gt;, but since quotes (apostrophes) are special in &lt;code&gt;awk&lt;/code&gt; this messes things up a little. The way to do it is either&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk &amp;#39;{ print &amp;quot;&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;&amp;quot;$F&amp;quot;&amp;#39;&amp;quot;&amp;#39;&amp;quot;&amp;#39;&amp;quot; }&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(I kid you not), or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;awk &amp;#39;{ print &amp;quot;\047&amp;quot;$F }&amp;#39; file.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;$F&lt;/code&gt; is whatever field of &lt;code&gt;file.txt&lt;/code&gt; is interesting.&lt;/p&gt;
&lt;p&gt;I think the second method might be a bit nicer.&lt;/p&gt;</content><category term="tips"></category><category term="awk"></category><category term="bash"></category><category term="unix"></category><category term="shell"></category></entry><entry><title>density plots without outlines in ggplot2</title><link href="tips/2015-05-20-density-ggplot2.html" rel="alternate"></link><published>2015-05-20T13:37:00+01:00</published><updated>2015-05-20T13:37:00+01:00</updated><author><name>corcra</name></author><id>tag:None,2015-05-20:tips/2015-05-20-density-ggplot2.html</id><summary type="html">&lt;p&gt;It is not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anything in the &lt;code&gt;aes&lt;/code&gt; of the &lt;code&gt;ggplot&lt;/code&gt; call  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;color=FALSE&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;color=NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;color=NA&lt;/code&gt; in the &lt;code&gt;geom_density&lt;/code&gt; call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grouping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nf"&gt;geom_density&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example (this is some real data I'm currently working with, but I've changed â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is not:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;anything in the &lt;code&gt;aes&lt;/code&gt; of the &lt;code&gt;ggplot&lt;/code&gt; call  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;color=FALSE&lt;/code&gt;  &lt;/li&gt;
&lt;li&gt;&lt;code&gt;color=NULL&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;color=NA&lt;/code&gt; in the &lt;code&gt;geom_density&lt;/code&gt; call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;e.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;grouping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nf"&gt;geom_density&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Example (this is some real data I'm currently working with, but I've changed the labels so it's hopefully not meaningful):&lt;/p&gt;
&lt;p&gt;&lt;img src="images/density_outline.png" class="center" style="width: 40vw;"/&gt;&lt;/p&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nf"&gt;ggplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nf"&gt;aes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nf"&gt;geom_density&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;NA&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nf"&gt;facet_grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;case&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nf"&gt;xlim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;-3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nf"&gt;theme_bw&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; 
&lt;span class="nf"&gt;scale_fill_manual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nf"&gt;c&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;darkorchid2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;darkturquoise&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
&lt;span class="nf"&gt;ggtitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;density plots with no outline&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="tips"></category><category term="ggplot2"></category><category term="R"></category><category term="vis"></category><category term="graphics"></category></entry><entry><title>deletion and replacement of strings in bash</title><link href="tips/2013-12-24-strings-in-bash.html" rel="alternate"></link><published>2013-12-24T00:00:00+00:00</published><updated>2013-12-24T00:00:00+00:00</updated><author><name>corcra</name></author><id>tag:None,2013-12-24:tips/2013-12-24-strings-in-bash.html</id><summary type="html">&lt;p&gt;I try to record useful one-liners for future reference. I forgot to write down what this one does:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mv &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This awkwardly-timed (time-zone troubles) blog post is atonement for my carelessness. Like all one-liners it looks complicated but is pretty simple. It does this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; f â€¦&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I try to record useful one-liners for future reference. I forgot to write down what this one does:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    mv &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This awkwardly-timed (time-zone troubles) blog post is atonement for my carelessness. Like all one-liners it looks complicated but is pretty simple. It does this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; f=STARTonetwothree 
    &amp;gt; echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;}
    onetwothree.START
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;${...}&lt;/code&gt; construction is brace expansion, which allows us to generate strings. In stages we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This takes the string &lt;code&gt;f&lt;/code&gt; and deletes the substring &lt;code&gt;START&lt;/code&gt; from the beginning. In fact, it deletes the longest match to the substring, which makes sense when you allow your substring to be something interesting including wildcards (which may have numerous matches). A single &lt;code&gt;#&lt;/code&gt; would delete the shortest match: try&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;#S*T&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    ARTonetwothree

    &amp;gt; echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##S*T&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    onetwothree
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To delete the substring from the end of the string, we would use &lt;code&gt;%%&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt;, where once again two means longest and one means shortest.&lt;/p&gt;
&lt;p&gt;So my horrible code fragment creates &lt;code&gt;f'&lt;/code&gt; by removing &lt;code&gt;START&lt;/code&gt; from the start of &lt;code&gt;f&lt;/code&gt;, then creates &lt;code&gt;f''&lt;/code&gt; by removing &lt;code&gt;f'&lt;/code&gt; from the end of&lt;code&gt;f&lt;/code&gt;, combines these with a period in the middle and renames the file named &lt;code&gt;f&lt;/code&gt; with this new string-aberration. An easier way to achieve the same result would have been&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   mv &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="c1"&gt;##START&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.START
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;but this does not generalise to the case of an arbitrary substring.&lt;/p&gt;
&lt;p&gt;The obvious application of this is removing/modifying file extensions. To rename all &lt;code&gt;.tgz&lt;/code&gt; files as &lt;code&gt;.tar.gz&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    for f in *.tgz do mv &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;%%&lt;/span&gt;&lt;span class="n"&gt;tgz&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;tar.gz done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the offending substring is not at the beginning or end, you could use replacement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; f=all_workERROR_and_ERRORno_playERROR
    &amp;gt; echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    all_work_and_no_play
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The syntax is &lt;code&gt;${string/substring/newsubstring}&lt;/code&gt;, where a double first slash (as in previous example) replaces all instances of substring. We can also do partial matching&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    all_work
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and of course replacement with something other than an empty string:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &amp;gt; fp=&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;_and_all_play&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt; 
    &amp;gt; echo &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;
    no_work_and_all_play
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if you have a bunch of messy gzipped files like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    data.gz.modified.gz.why.gz.did.gz.i.do.this.gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the solution is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    for f in *.gz do mv &lt;span class="nv"&gt;$f&lt;/span&gt; &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;//.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;.gz done
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and to wonder how you got into that mess in the first place.&lt;/p&gt;</content><category term="tips"></category><category term="bash"></category><category term="strings"></category><category term="regex"></category><category term="shell"></category></entry><entry><title>putting a line in a filename (with sed)</title><link href="tips/2013-08-06-putting-a-line-sed.html" rel="alternate"></link><published>2013-08-06T00:00:00+01:00</published><updated>2013-08-06T00:00:00+01:00</updated><author><name>corcra</name></author><id>tag:None,2013-08-06:tips/2013-08-06-putting-a-line-sed.html</id><summary type="html">&lt;p&gt;&lt;em&gt;"How can I cut a line from a file and paste the rest into a file whose title is the line I just cut?"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you find yourself asking yourself this question with any degree of regularity, you may have issues. Luckily for you, the help you so desperately need â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;"How can I cut a line from a file and paste the rest into a file whose title is the line I just cut?"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If you find yourself asking yourself this question with any degree of regularity, you may have issues. Luckily for you, the help you so desperately need is at hand. It is not the help you want, but it is the help you deserve. For added complication let's assume you want to do this for every line in the file.&lt;/p&gt;
&lt;p&gt;Solution (bash):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    &amp;gt; for i in $(seq `wc -l &amp;lt; FILENAME`)&lt;/span&gt;
&lt;span class="err"&gt;    &amp;gt; do&lt;/span&gt;
&lt;span class="err"&gt;    &amp;gt;   sed &amp;#39;&amp;#39;$i&amp;#39;d&amp;#39; FILENAME &amp;gt; something_else_maybe-`sed -n &amp;#39;&amp;#39;$i&amp;#39;p&amp;#39; FILENAME`&lt;/span&gt;
&lt;span class="err"&gt;    &amp;gt; done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What is going on here is the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;seq N&lt;/code&gt; prints a sequence of integers, 1 to N.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wc -l &amp;lt; FILENAME&lt;/code&gt; produces the number of lines in &lt;code&gt;FILENAME&lt;/code&gt;. The normal way I do this is &lt;code&gt;wc -l FILENAME&lt;/code&gt;, but that also prints the name of the file, which would confuse &lt;code&gt;seq&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enclosing a bash command in ` ` (note these are not ' or ", these are backticks (also known as grave accents (bracket nesting))) replaces the command string with the output of the command. &lt;code&gt;$()&lt;/code&gt; also does this. Why are there two ways to do this, and why did I use both of them in my solution? We may never know.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed 'Md' FILENAME&lt;/code&gt;, as per the rules of &lt;code&gt;sed&lt;/code&gt;, has &lt;code&gt;FILENAME&lt;/code&gt; as output, having deleted line &lt;code&gt;M&lt;/code&gt; (in our case, &lt;code&gt;'$i'&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed -n 'Qp' FILENAME&lt;/code&gt; runs through &lt;code&gt;FILENAME&lt;/code&gt;, printing nothing (the &lt;code&gt;-n&lt;/code&gt;) flag unless otherwise instructed (with &lt;code&gt;p&lt;/code&gt;), as occurs for line &lt;code&gt;Q&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;"something_else_maybe"&lt;/code&gt; just demonstrates that you could include other elements in the output filename. Further complication could be introduced here (say replacing it with &lt;code&gt;$i&lt;/code&gt; or whatever you want), but that is too far. Too damn far.&lt;/li&gt;
&lt;/ul&gt;</content><category term="tips"></category><category term="sed"></category><category term="shell"></category><category term="bash"></category></entry><entry><title>man cut and other simple yet useful unix bits</title><link href="tips/2013-07-22-man-cut.html" rel="alternate"></link><published>2013-07-22T00:00:00+01:00</published><updated>2013-07-22T00:00:00+01:00</updated><author><name>corcra</name></author><id>tag:None,2013-07-22:tips/2013-07-22-man-cut.html</id><summary type="html">&lt;p&gt;Instead of just reading the man file, you could read this post about &lt;code&gt;cut&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Printing columns ('fields') n to m (inclusive) from a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus, removing the first n-1 fields from a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;[delimiter]&lt;/code&gt; is automatically a â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Instead of just reading the man file, you could read this post about &lt;code&gt;cut&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Printing columns ('fields') n to m (inclusive) from a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Thus, removing the first n-1 fields from a file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;cut&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;[delimiter]&lt;/code&gt; is automatically a tab space. You could also have ' ' (space), '&lt;code&gt;`'&lt;/code&gt;, '&lt;code&gt;:&lt;/code&gt;', '&lt;code&gt;-&lt;/code&gt;', '&lt;code&gt;_&lt;/code&gt;'. Apparently '&lt;code&gt;HELLO&lt;/code&gt;' is not an acceptable delimiter, which is some kind of bug I guess.&lt;/p&gt;
&lt;p&gt;If you just want a specific column, you could use &lt;code&gt;awk&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    awk &amp;#39;{ print $n }&amp;#39; filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or do some fancier things like - say* we have a file containing a list of chromosome numbers and SNPids and some other information separated into columns, and we want to extract just the chromosomes and SNPids, rewriting '&lt;code&gt;2&lt;/code&gt;' as '&lt;code&gt;chr02&lt;/code&gt;' etc. and including a tab space, we could write&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    awk &amp;#39;{ if ($1&amp;lt;10) print &amp;quot;chr0&amp;quot; $1 &amp;quot;\t&amp;quot; $2; else print &amp;quot;chr&amp;quot; $1 &amp;quot;\t&amp;quot; $2 }&amp;#39; filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The double-quotation marks are necessary here. In &lt;code&gt;awk&lt;/code&gt; it's not that column numbering intentionally starts from 1 (note that chromosomes, which are in the first column are accessed via &lt;code&gt;$1&lt;/code&gt;), but &lt;code&gt;$0&lt;/code&gt; contains the full line. So you could do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    awk &amp;#39;{ if ($1+$2 == 3) print $0; else print $1+$2,&amp;quot;is not 3&amp;quot; }&amp;#39; filename&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;if for some reason you wanted to pick out lines whose first two columns sum to three. If you try doing that and &lt;code&gt;$2&lt;/code&gt; or &lt;code&gt;$1&lt;/code&gt; don't contain something which could reasonably be added (e.g. in the SNPid example) &lt;code&gt;awk&lt;/code&gt; will just give weird output and not realise the horrible things it's doing, so be careful with that.&lt;/p&gt;
&lt;p&gt;Note the comma (eg in &lt;code&gt;print $1+$2,"is not 3"&lt;/code&gt;) just denotes a space. As per earlier, use &lt;code&gt;"\t"&lt;/code&gt; to insert a tab.&lt;/p&gt;
&lt;p&gt;You could do something similar to extract all the even or odd columns in a file by silencing those you don't want:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    awk &amp;#39;{ for(i=1;i&amp;lt;=NF;i+=2) $i=&amp;quot;&amp;quot; }1&amp;#39; filename &amp;gt; evencols&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No, the &lt;code&gt;1&lt;/code&gt; is not a typo. It just tells &lt;code&gt;awk&lt;/code&gt; to print every line. Now, this will produce some unwanted spaces between fields, so we can get rid of the with &lt;code&gt;sed&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    sed &amp;quot;s/^ //;s/  / /g&amp;quot; evencols&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The basic thing going on here is s/string_to_replace/with_this_string, separated by ; indicating a new command for &lt;code&gt;sed&lt;/code&gt;. In the first one we're stripping a leading whitespace from each line - &lt;code&gt;^&lt;/code&gt; indicates 'start of line', so we're replacing "white space at start" with "nothing". The second command is simply replacing double whitespace with single whitespace. I'm sure there are more rigorous ways to do this, but this worked for me.&lt;/p&gt;
&lt;p&gt;What about finding things? Suppose I have a giant folder - how giant you say?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    ls . | wc -l&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This just pipes the output of &lt;code&gt;ls .&lt;/code&gt; into &lt;code&gt;wc&lt;/code&gt; which, with the &lt;code&gt;-l&lt;/code&gt; flag counts how many lines we have. The folder I'm looking at has 948 things in it, because I am organised like that. I want to find a file with 'wolf' in the title, so I can do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    ls -l . | grep &amp;#39;wolf&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I inclued the &lt;code&gt;-l&lt;/code&gt; flag on ls because I'm interested in things like the biggest file with &lt;code&gt;wolf&lt;/code&gt; in its title. Supposing I had a worryingly large number of wolf-related files, I could get straight to the biggest one by piping more commands together:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    ls -l . | grep &amp;#39;wolf&amp;#39; | sort -n | tail -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; outputs low to high, which is why we take the &lt;code&gt;tail -1&lt;/code&gt; one.&lt;/p&gt;
&lt;p&gt;Now, let's suppose I don't know which subdirectory my wolf file is in. I could do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*wolf*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to find all files with '&lt;code&gt;wolf&lt;/code&gt;' anywhere in their title in the directory &lt;code&gt;[directory]&lt;/code&gt; and all subdirectories of it. To search from the current directory, use . as [directory], etc. To only find &lt;code&gt;wolf&lt;/code&gt; files over a certain size (say 1 MB) from the current directory, we have&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;directory&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*wolf*&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;size&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(use &lt;code&gt;-1k&lt;/code&gt; to get &lt;code&gt;wolf&lt;/code&gt; files under 1 kB) or to find all wolf files, sort them by size, and pick out the biggest one, we do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;    find . -name &amp;#39;gray_wolf*&amp;#39; -ls | sort -k5 -n | tail -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-ls&lt;/code&gt; flag tells &lt;code&gt;find&lt;/code&gt; to give output in a sort of &lt;code&gt;ls&lt;/code&gt; format. For me, the 5th column of this output is the file-size, so we sort based on this column (&lt;code&gt;sort -k5&lt;/code&gt;), and the rest is the same as before.&lt;/p&gt;
&lt;p&gt;*based on a real event&lt;/p&gt;</content><category term="tips"></category><category term="awk"></category><category term="cut"></category><category term="find"></category><category term="grep"></category><category term="unix"></category><category term="shell"></category></entry></feed>